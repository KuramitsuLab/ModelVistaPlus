[
    {
        "tag": "認証設計",
        "question": "社員がログインする際に社員IDとパスワードを使用する設計になっている。この図から判断して、セキュリティ強化のために最も優先的に検討すべき追加要件はどれか。",
        "choice": [
            "パスワードのハッシュ化やソルト付与などの暗号化仕様",
            "社員IDの桁数を10桁以上に制限する",
            "ログイン画面のデザインを改善する",
            "会社名も認証情報に含める"
        ],
        "authored_by": "claude",
        "is_translated": false
    },
    {
        "tag": "データ整合性",
        "question": "社員が必ず1つの部署に所属し、部署が必ず1つの会社に所属するという制約がある。社員データを削除する際、この制約を考慮した実装として最も適切な判断はどれか。",
        "choice": [
            "部署や会社との関連を確認し、孤立データを防ぐ処理が必要",
            "社員データは単独で削除可能であり特別な処理は不要",
            "削除時は必ず会社データも同時に削除する",
            "マネージャのみ削除可能とする権限制御が必要"
        ],
        "authored_by": "claude",
        "is_translated": false
    },
    {
        "tag": "権限設計の拡張性",
        "question": "現在、マネージャは社員を継承し「経費を承認/却下する」機能を持つ。今後、部長や役員など複数の承認階層を追加する場合、この設計の問題点はどれか。",
        "choice": [
            "継承だけでは役職ごとの承認権限の柔軟な制御が困難",
            "マネージャクラスを削除すれば問題なく拡張可能",
            "社員IDを変更すれば承認階層を表現できる",
            "部署との関連を変更すれば階層構造を実現できる"
        ],
        "authored_by": "claude",
        "is_translated": false
    },
    {
        "tag": "機能依存関係",
        "question": "「経費を申請する」機能と「経費を承認/却下する」機能の関係について、開発時に考慮すべきリスクはどれか。",
        "choice": [
            "申請データが存在しない状態での承認処理の例外ハンドリング",
            "申請と承認は独立しているため依存関係を考慮不要",
            "マネージャは申請機能を使用できないよう制限すべき",
            "承認機能は申請機能より先に実装すべき"
        ],
        "authored_by": "claude",
        "is_translated": false
    },
    {
        "tag": "組織変更への対応",
        "question": "社員の部署異動が発生した場合、この設計で考慮すべき影響範囲はどれか。",
        "choice": [
            "所属部署の変更が経費申請や承認プロセスに与える影響の確認",
            "社員IDとパスワードを再発行する必要がある",
            "異動時は必ず会社も変更しなければならない",
            "マネージャへの昇格処理と同時に実行する"
        ],
        "authored_by": "claude",
        "is_translated": false
    },
    {
        "tag": "データモデルの一貫性",
        "question": "「所属社員」「所属部署」という双方向の参照関係が示されている。この設計でデータ不整合が発生するリスクが最も高いケースはどれか。",
        "choice": [
            "片方向のみ更新され、逆方向の参照が更新されない場合",
            "社員が複数の部署に所属を試みた場合",
            "パスワードが変更された場合",
            "経費申請が承認されなかった場合"
        ],
        "authored_by": "claude",
        "is_translated": false
    },
    {
        "tag": "例外処理設計",
        "question": "マネージャが自分自身の経費を承認/却下しようとした場合、この図から判断して実装時に必要な制御はどれか。",
        "choice": [
            "自己承認を防ぐビジネスルールの実装が必要",
            "マネージャは自己承認が可能であり制御は不要",
            "社員IDで自動的に判定され制御は不要",
            "部署が同じ場合のみ自己承認を許可する"
        ],
        "authored_by": "claude",
        "is_translated": false
    },
    {
        "tag": "機能分離の妥当性",
        "question": "「経費を登録する」と「経費を申請する」が別機能として分離されている。この設計から推測される業務フローとして最も妥当なものはどれか。",
        "choice": [
            "下書き保存後に正式申請する2段階のワークフロー",
            "登録と申請は同時に実行されるため分離は不要",
            "マネージャのみが両方の機能を使用できる",
            "登録は部署単位、申請は会社単位で行う"
        ],
        "authored_by": "claude",
        "is_translated": false
    },
    {
        "tag": "スケーラビリティ",
        "question": "会社の規模が拡大し、数万人の社員、数百の部署を管理する必要が生じた場合、この設計で最も問題となる可能性が高い点はどれか。",
        "choice": [
            "1対多の関連による大量データ取得時のパフォーマンス劣化",
            "パスワードの文字列長が不足する",
            "マネージャの継承関係が複雑化する",
            "会社名の重複が発生する"
        ],
        "authored_by": "claude",
        "is_translated": false
    },
    {
        "tag": "セキュリティとアクセス制御",
        "question": "一般社員が誤って他の社員の経費を登録・申請できてしまう可能性について、この図から判断して必要な実装はどれか。",
        "choice": [
            "ログイン中の社員IDと経費データの所有者を照合する機能",
            "マネージャのみが経費を登録できるよう制限する",
            "部署単位でアクセス権を一括管理する",
            "社員IDを暗号化して他者のデータにアクセスできなくする"
        ],
        "authored_by": "claude",
        "is_translated": false
    }
]