[
    {
        "tag": "データ整合性管理",
        "question": "図書の「貸出し可能？()」フラグと図書貸出テーブルのレコード存在の関係について、開発上最も注意すべき点はどれか。",
        "choice": [
            "両者の整合性を保つトランザクション制御と定期的な整合性チェックが必要である",
            "フラグさえ正しく管理すれば貸出テーブルのレコードは不要である",
            "貸出テーブルにレコードがあればフラグは自動的に更新される",
            "フラグは参照用のため整合性を気にする必要はない"
        ],
        "authored_by": "claude",
        "is_translated": false
    },
    {
        "tag": "仕様変更の影響分析",
        "question": "「1人の登録利用者が同時に複数冊の図書を借りられる」という仕様変更を行う場合、ER図のどの部分を変更する必要があるか。",
        "choice": [
            "登録利用者と図書貸出の関係を1:0..1から1:0..*に変更する必要がある",
            "図書と図書貸出の関係を変更すれば対応できる",
            "登録利用者テーブルに貸出冊数上限の属性を追加するだけでよい",
            "現在の設計のまま変更は不要である"
        ],
        "authored_by": "claude",
        "is_translated": false
    },
    {
        "tag": "業務フロー設計",
        "question": "貸出予約機能を実装する際、図書タイトルと貸出予約が0..*:0..1の関係になっている設計から判断すべき実装上の課題はどれか。",
        "choice": [
            "予約者情報や予約順序を管理する仕組みが図に明示されておらず別途設計が必要である",
            "1つの図書タイトルに1件しか予約できないため問題ない",
            "予約は図書館員のみが行うため利用者情報は不要である",
            "図書タイトルから直接予約情報にアクセスできるため追加設計は不要である"
        ],
        "authored_by": "claude",
        "is_translated": false
    },
    {
        "tag": "例外処理設計",
        "question": "登録利用者の「借り出し権利あり？()」がfalseの状態で貸出処理が実行された場合、システムとして最も適切な対応はどれか。",
        "choice": [
            "貸出処理の実行前にチェックし権利がない場合はエラーを返して処理を中断する",
            "権利の有無に関わらず貸出を実行し後で図書館員が確認する",
            "警告を表示するが貸出処理自体は継続する",
            "借り出し権利は参考情報なので特に処理は不要である"
        ],
        "authored_by": "claude",
        "is_translated": false
    },
    {
        "tag": "データモデル設計",
        "question": "図書タイトルと図書が1:1の関係で設計されている理由として、開発者が理解すべき最も重要な設計意図はどれか。",
        "choice": [
            "書誌情報（メタデータ）と物理的な蔵書を分離して在庫管理を行うためである",
            "データベースの正規化のルールに従っただけである",
            "図書タイトルと図書は同じものなので1対1が自然である",
            "システムのパフォーマンスを向上させるためである"
        ],
        "authored_by": "claude",
        "is_translated": false
    },
    {
        "tag": "制約条件の実装",
        "question": "図書タイトルと図書分類の関係が0..*:1..*となっており、図書分類側が1以上である制約について、実装時に考慮すべき処理はどれか。",
        "choice": [
            "図書タイトル登録時に最低1つの分類選択を必須とするバリデーションが必要である",
            "図書分類は自動的に割り当てられるため特別な処理は不要である",
            "分類は後から追加できるため登録時のチェックは不要である",
            "図書館員が手動で確認するため システム側の制約は不要である"
        ],
        "authored_by": "claude",
        "is_translated": false
    },
    {
        "tag": "競合制御設計",
        "question": "同じ図書に対して複数の登録利用者がほぼ同時に貸出処理を実行した場合、システムとして実装すべき制御はどれか。",
        "choice": [
            "排他制御を実装し最初の処理のみ成功させ他は在庫なしエラーとする",
            "先着順にキューイングして順次貸出処理を実行する",
            "複数人に貸出可能なよう図書テーブルに数量フィールドを追加する",
            "図書館員が手動で調整するためシステム側の制御は不要である"
        ],
        "authored_by": "claude",
        "is_translated": false
    },
    {
        "tag": "継承関係の実装",
        "question": "人物エンティティから登録利用者と図書館員が継承している設計について、データベース実装時の選択肢として最も不適切なものはどれか。",
        "choice": [
            "人物テーブルを作らず登録利用者と図書館員で氏名と生年月日を重複管理する",
            "単一テーブル継承で人物テーブルに区分カラムを追加して管理する",
            "クラステーブル継承で人物・登録利用者・図書館員の3テーブルで管理する",
            "具象テーブル継承で登録利用者と図書館員テーブルに共通属性を持たせる"
        ],
        "authored_by": "claude",
        "is_translated": false
    },
    {
        "tag": "運用監視設計",
        "question": "返却期限日を過ぎた図書貸出を検知するバッチ処理を実装する場合、図から判断して最も適切な実装方針はどれか。",
        "choice": [
            "図書貸出テーブルの返却期限日と現在日時を比較し該当レコードを抽出する",
            "登録利用者の借り出し権利フラグをfalseに変更するだけでよい",
            "図書の貸出可能フラグを監視すれば延滞は自動検知できる",
            "図書館員テーブルから手動確認する職員を抽出するだけでよい"
        ],
        "authored_by": "claude",
        "is_translated": false
    },
    {
        "tag": "機能拡張の影響範囲",
        "question": "「図書の貸出履歴を永続的に保管する」という要件が追加された場合、現在の設計での問題点と対応として最も適切なものはどれか。",
        "choice": [
            "現在の図書貸出は進行中の貸出のみを想定しており履歴テーブルの追加が必要である",
            "図書貸出テーブルにレコードを残し続ければ対応できる",
            "図書テーブルに貸出回数カウンタを追加すれば十分である",
            "登録利用者テーブルに貸出履歴を JSON形式で保存すればよい"
        ],
        "authored_by": "claude",
        "is_translated": false
    }
]