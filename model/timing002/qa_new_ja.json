[
    {
        "tag": "状態遷移の整合性",
        "question": "ATMが「認証中」から「使用中」へ状態遷移する際、利用者側の状態も「操作中」のままである。この設計について開発者が考慮すべき最も重要な点はどれか。",
        "choice": [
            "両者の状態が同期していないため、状態不整合が発生するリスクがある",
            "利用者は常に操作中であるべきなので、この設計は問題ない",
            "ATM側の状態のみを管理すればよいので、利用者側は無視できる",
            "認証完了時に両者とも待機中に戻るべきなので設計が誤っている"
        ],
        "authored_by": "claude",
        "is_translated": false
    },
    {
        "tag": "例外処理の欠落",
        "question": "図には「暗証番号を入力する」から「認証完了」への遷移のみが示されている。開発者がこの図から最も懸念すべき仕様の不足はどれか。",
        "choice": [
            "暗証番号が誤っていた場合の処理フローが定義されていない点",
            "暗証番号の入力形式が明記されていないため実装できない点",
            "認証完了後のタイムアウト処理が記載されていない点",
            "複数回の認証試行を許可する仕様が含まれていない点"
        ],
        "authored_by": "claude",
        "is_translated": false
    },
    {
        "tag": "セキュリティリスク",
        "question": "「カードを挿入する」アクションで即座に「取引開始」となる設計について、セキュリティ観点で開発者が最も注意すべき点はどれか。",
        "choice": [
            "カード挿入だけで取引が開始され、認証前の状態管理が必要になる点",
            "カード情報の暗号化が図に明記されていないため実装できない点",
            "取引開始のログが記録されないためセキュリティ監査できない点",
            "複数のカードを同時に挿入された場合の処理が定義されていない点"
        ],
        "authored_by": "claude",
        "is_translated": false
    },
    {
        "tag": "依存関係の影響分析",
        "question": "仕様変更により「認証完了」の判定ロジックを強化する必要が生じた場合、この図から判断して影響を受ける可能性が最も高い部分はどれか。",
        "choice": [
            "認証完了後の「使用中」状態への遷移タイミングと取引終了処理全体",
            "カード挿入時の待機中状態の処理のみで他への影響はない",
            "利用者側の操作中状態のみで、ATM側の状態には影響しない",
            "取引開始のタイミングのみで、その後の処理には影響を与えない"
        ],
        "authored_by": "claude",
        "is_translated": false
    },
    {
        "tag": "並行処理の考慮",
        "question": "図では線形な処理フローが示されているが、実運用で複数ユーザーが同時にATMを利用しようとした場合、開発者が考慮すべき設計要素はどれか。",
        "choice": [
            "待機中から認証中への排他制御と、状態遷移のアトミック性の保証",
            "利用者ごとに別のATMインスタンスを生成して完全に分離する方式",
            "先着順でキューイングし、前の取引終了まで待機させる単純な方式",
            "図に記載がないため並行処理は考慮不要と判断して実装しない方式"
        ],
        "authored_by": "claude",
        "is_translated": false
    },
    {
        "tag": "タイムアウト設計",
        "question": "「認証中」状態で利用者が暗証番号を入力しないまま長時間放置された場合、図には明示されていないが開発者が実装すべき最も適切な処理はどれか。",
        "choice": [
            "一定時間後に自動的に取引をキャンセルし、待機中状態に戻す処理",
            "利用者が入力するまで無期限に認証中状態を維持し続ける処理",
            "管理者に通知して手動でシステムをリセットさせる処理",
            "カードを強制排出し、エラーログを記録せず終了する処理"
        ],
        "authored_by": "claude",
        "is_translated": false
    },
    {
        "tag": "状態復帰の設計",
        "question": "「取引終了」後、ATMと利用者の両方が元の状態に戻る必要があるが、図からは最終状態が明確でない。開発者が最も適切に判断すべき設計はどれか。",
        "choice": [
            "両者とも「待機中」状態に戻り、次の取引を受け付け可能にする設計",
            "ATMのみ待機中に戻り、利用者は操作中のまま維持する設計",
            "両者とも終了状態となり、システム再起動が必要となる設計",
            "利用者のみ待機中に戻り、ATMは使用中を維持する設計"
        ],
        "authored_by": "claude",
        "is_translated": false
    },
    {
        "tag": "ログ記録の要件",
        "question": "図には明示されていないが、監査やトラブルシューティングのために開発者が記録すべき最も重要なイベントはどれか。",
        "choice": [
            "各状態遷移のタイムスタンプと、認証の成否を含む全ての遷移記録",
            "取引終了時のみログを記録し、途中経過は保存しない方式の記録",
            "利用者の個人情報を含む詳細な操作履歴をすべて記録する方式",
            "エラー発生時のみログを記録し、正常系は記録を省略する方式"
        ],
        "authored_by": "claude",
        "is_translated": false
    },
    {
        "tag": "リトライ処理の設計",
        "question": "「暗証番号を入力する」から「認証完了」への遷移が失敗した場合を想定し、開発者が実装すべき最も堅牢な設計はどれか。",
        "choice": [
            "回数制限付きでリトライを許可し、上限到達時はカード没収等の処理",
            "一度でも失敗したら即座に取引を中止してカードを返却する処理",
            "失敗しても無制限にリトライを許可し、利用者の入力を待つ処理",
            "失敗時は管理者による手動解除を必須とし、自動復旧しない処理"
        ],
        "authored_by": "claude",
        "is_translated": false
    },
    {
        "tag": "トランザクション整合性",
        "question": "「認証完了」から「取引終了」までの間に、システム障害やネットワーク切断が発生した場合、開発者が最も考慮すべき設計上の課題はどれか。",
        "choice": [
            "処理の途中状態を適切に管理し、ロールバックまたはリカバリ可能にする設計",
            "障害発生時は全ての状態をリセットして、再度カード挿入からやり直す設計",
            "使用中状態を永続化し、復旧後も同じ状態から継続できるようにする設計",
            "図に障害処理の記載がないため、障害対応は実装不要と判断する設計"
        ],
        "authored_by": "claude",
        "is_translated": false
    }
]